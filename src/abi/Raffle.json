{
  "address": "0x7C8cB9888f15fb0D18290b1761bD2c43E72C6994",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract VRFv2Consumer",
          "name": "_consumer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniSwapRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RANDOM_MAX_RANGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalBalance",
          "type": "uint256"
        }
      ],
      "name": "calculateRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "currencyOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endRaffle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "founder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_raffleId",
          "type": "uint256"
        }
      ],
      "name": "getBalanceInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getCurrencyExt",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_raffleId",
          "type": "uint256"
        }
      ],
      "name": "getRafflePlayers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "playerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "playerBet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prevDepSum",
              "type": "uint256"
            }
          ],
          "internalType": "struct Raffle.Player[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRandomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getTokenOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinnerNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isPotTransfered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isRaffleInProcess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "manageAdmins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dataFeed",
          "type": "address"
        }
      ],
      "name": "manageCurrencyOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dataFeed",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isAllowed",
          "type": "bool"
        }
      ],
      "name": "manageTokenAndOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isAllowed",
          "type": "bool"
        }
      ],
      "name": "manageTokensList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniSwapRouter",
          "type": "address"
        }
      ],
      "name": "manageUniswap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VRFv2Consumer",
          "name": "_consumer",
          "type": "address"
        }
      ],
      "name": "manageVrfRandom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wethToken",
          "type": "address"
        }
      ],
      "name": "manageWeth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_num1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_num2",
          "type": "uint256"
        }
      ],
      "name": "percCalc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "playRaffle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "raffleId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rafflePlayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "playerBet",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevDepSum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rafflePot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rafflePotInWeth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "raffleWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "raffleWinnerNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIdForRaffle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userPosInRaffle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_raffleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_supposedWinner",
          "type": "address"
        }
      ],
      "name": "verifyAndTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_raffleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_supposedWinner",
          "type": "address"
        }
      ],
      "name": "verifyWinner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "x",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "y",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "z",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x96621b79e2674b62c76bc948818c8650da06176a3228ddd70ac6b98f2094d112",
  "receipt": {
    "to": null,
    "from": "0x574983Be59ba0056A6A28BBBac930051678734B3",
    "contractAddress": "0x7C8cB9888f15fb0D18290b1761bD2c43E72C6994",
    "transactionIndex": 112,
    "gasUsed": "2504110",
    "logsBloom": "0x
    "blockHash": "0xb67919b0a3b626f9095b4db21090c56666b1f828bd9cdfbbdde7c83142c0aee9",
    "transactionHash": "0x96621b79e2674b62c76bc948818c8650da06176a3228ddd70ac6b98f2094d112",
    "logs": [
      {
        "transactionIndex": 112,
        "blockNumber": 5196892,
        "transactionHash": "0x96621b79e2674b62c76bc948818c8650da06176a3228ddd70ac6b98f2094d112",
        "address": "0x7C8cB9888f15fb0D18290b1761bD2c43E72C6994",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000574983be59ba0056a6a28bbbac930051678734b3"
        ],
        "data": "0x",
        "logIndex": 267,
        "blockHash": "0xb67919b0a3b626f9095b4db21090c56666b1f828bd9cdfbbdde7c83142c0aee9"
      }
    ],
    "blockNumber": 5196892,
    "cumulativeGasUsed": "15897652",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8b56001485d5d47A97f1B7b53b3B3734bA3b2FBD",
    "0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9",
    "0xC532a74256D3Db42D0Bf7a0400fEFDbad7694008"
  ],
  "numDeployments": 1,
  "solcInputHash": "56eb49356fa1c9d558888234aefe5444",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract VRFv2Consumer\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniSwapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RANDOM_MAX_RANGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalBalance\",\"type\":\"uint256\"}],\"name\":\"calculateRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currencyOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"getBalanceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getCurrencyExt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"getRafflePlayers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"playerBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevDepSum\",\"type\":\"uint256\"}],\"internalType\":\"struct Raffle.Player[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinnerNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isPotTransfered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isRaffleInProcess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"manageAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dataFeed\",\"type\":\"address\"}],\"name\":\"manageCurrencyOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dataFeed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAllowed\",\"type\":\"bool\"}],\"name\":\"manageTokenAndOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAllowed\",\"type\":\"bool\"}],\"name\":\"manageTokensList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniSwapRouter\",\"type\":\"address\"}],\"name\":\"manageUniswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VRFv2Consumer\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"manageVrfRandom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"}],\"name\":\"manageWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_num2\",\"type\":\"uint256\"}],\"name\":\"percCalc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"playRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raffleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rafflePlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"playerBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevDepSum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rafflePot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rafflePotInWeth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffleWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffleWinnerNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIdForRaffle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPosInRaffle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_supposedWinner\",\"type\":\"address\"}],\"name\":\"verifyAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_supposedWinner\",\"type\":\"address\"}],\"name\":\"verifyWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"x\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"y\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"z\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x215529a99534a40e6257ef2282a91ea4a95b66debc3997866406907622efb405\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"../node_modules/@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../node_modules/@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"../node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../node_modules/@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\nimport \\\"./RandomNumberConsumerV2.sol\\\";\\n\\ncontract Raffle is Ownable {\\n    mapping(address => bool) public allowedTokens;\\n\\n    mapping(address => address) public currencyOracle;\\n\\n    mapping(uint256 => uint256) public rafflePot;\\n\\n    mapping(uint256 => uint256) public rafflePotInWeth;\\n\\n    mapping(uint256 => bool) public isRaffleInProcess;\\n\\n    mapping(uint256 => Player[]) public rafflePlayers;\\n\\n    mapping(address => uint256) public isPlayed;\\n\\n    mapping(uint256 => uint256) public raffleWinnerNumber;\\n\\n    mapping(uint256 => uint256) public requestIdForRaffle;\\n\\n    mapping(uint256 => address) public raffleWinner;\\n\\n    mapping(uint256 => bool) public isPotTransfered;\\n\\n    mapping(address => bool) public isAdmin;\\n\\n    mapping(address => mapping(uint256 => uint256)) public userPosInRaffle;\\n\\n    uint256 public raffleId;\\n\\n    uint256 public x;\\n\\n    uint256 public y;\\n\\n    uint256 public z;\\n\\n    uint256 public constant DECIMALS = 18;\\n\\n    uint256 public constant RANDOM_MAX_RANGE = 999999999999999999;\\n\\n    address private _weth;\\n\\n    address public uniswapRouterAddress;\\n\\n    address public founder;\\n\\n    VRFv2Consumer randomNumberConsumer;\\n    IUniswapV2Router02 private _router;\\n\\n    struct Player {\\n        address playerAddress;\\n        uint256 playerBet;\\n        uint256 prevDepSum;\\n    }\\n\\n    uint256[30] private _gap;\\n\\n    constructor(\\n        VRFv2Consumer _consumer,\\n        address _wethAddress,\\n        address _uniSwapRouter\\n    ) Ownable() {\\n        randomNumberConsumer = _consumer;\\n        _weth = _wethAddress;\\n        _router = IUniswapV2Router02(_uniSwapRouter);\\n        uniswapRouterAddress = _uniSwapRouter;\\n        isAdmin[msg.sender] = true;\\n        isPotTransfered[raffleId] = true;\\n    }\\n\\n    modifier onlyAllowedTokens(address _token) {\\n        require(allowedTokens[_token], \\\"Token is not supported!\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin[msg.sender], \\\"Only admin can perform this!\\\");\\n        _;\\n    }\\n\\n    function manageAdmins(address _user, bool _status) external onlyAdmin {\\n        isAdmin[_user] = _status;\\n    }\\n\\n    function manageVrfRandom(VRFv2Consumer _consumer) external onlyAdmin {\\n        randomNumberConsumer = _consumer;\\n    }\\n\\n    function manageUniswap(address _uniSwapRouter) external onlyAdmin {\\n        _router = IUniswapV2Router02(_uniSwapRouter);\\n        uniswapRouterAddress = _uniSwapRouter;\\n    }\\n\\n    function manageWeth(address _wethToken) external onlyAdmin {\\n        _weth = _wethToken;\\n    }\\n\\n    function manageTokensList(\\n        address _token,\\n        bool _isAllowed\\n    ) external onlyAdmin {\\n        allowedTokens[_token] = _isAllowed;\\n    }\\n\\n    function manageCurrencyOracle(\\n        address _token,\\n        address _dataFeed\\n    ) external onlyAdmin {\\n        currencyOracle[_token] = _dataFeed;\\n    }\\n\\n    function manageTokenAndOracle(\\n        address _token,\\n        address _dataFeed,\\n        bool _isAllowed\\n    ) external onlyOwner {\\n        allowedTokens[_token] = _isAllowed;\\n        currencyOracle[_token] = _dataFeed;\\n    }\\n\\n    function getCurrency(\\n        address _token\\n    ) internal view onlyAllowedTokens(_token) returns (int) {\\n        AggregatorV3Interface localDataFeed = AggregatorV3Interface(\\n            currencyOracle[_token]\\n        );\\n\\n        (, int answer, , , ) = localDataFeed.latestRoundData();\\n        return answer;\\n    }\\n\\n    function getCurrencyExt(address _token) public view returns (int) {\\n        return getCurrency(_token);\\n    }\\n\\n    function getRafflePlayers(\\n        uint256 _raffleId\\n    ) external view returns (Player[] memory) {\\n        return rafflePlayers[_raffleId];\\n    }\\n\\n    function getBalanceInUsd(\\n        address _player,\\n        uint256 _raffleId\\n    ) public view returns (uint256) {\\n        return\\n            rafflePlayers[_raffleId][userPosInRaffle[_player][raffleId]]\\n                .playerBet;\\n    }\\n\\n    function getTokenOracle(address _token) external view returns (address) {\\n        return currencyOracle[_token];\\n    }\\n\\n    function getWinnerNumber() public view returns (uint256) {\\n        return raffleWinnerNumber[raffleId];\\n    }\\n\\n    function getRandomNumber() public returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        blockhash(block.number - 1),\\n                        block.timestamp\\n                    )\\n                )\\n            );\\n    }\\n\\n    function requestRandomNumber() internal onlyAdmin {\\n        requestIdForRaffle[raffleId] = randomNumberConsumer\\n            .requestRandomWords();\\n    }\\n\\n    function deposite(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _raffleId\\n    ) internal onlyAllowedTokens(_token) {\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n\\n        require(\\n            IERC20(_token).balanceOf(address(this)) >= _amount && _amount > 0,\\n            \\\"Not enough balance!\\\"\\n        );\\n\\n        int256 currency = getCurrency(_token);\\n\\n        uint256 usdAmount = uint256(currency) * _amount;\\n\\n        address[] memory path = new address[](2);\\n        path[0] = _token;\\n        path[1] = _weth;\\n\\n        IERC20(_token).approve(uniswapRouterAddress, _amount);\\n\\n        uint256[] memory amountsOut = _router.getAmountsOut(_amount, path);\\n\\n        uint256 amountInWeth = _router.swapExactTokensForTokens(\\n            _amount,\\n            amountsOut[amountsOut.length - 1],\\n            path,\\n            address(this),\\n            block.timestamp + 600\\n        )[amountsOut.length - 1];\\n\\n        Player memory rafflePlayer;\\n        rafflePlayer.playerAddress = msg.sender;\\n        rafflePlayer.playerBet = usdAmount;\\n        rafflePlayer.prevDepSum = rafflePot[_raffleId];\\n\\n        userPosInRaffle[msg.sender][_raffleId] = rafflePlayers[_raffleId]\\n            .length;\\n\\n        rafflePlayers[_raffleId].push(rafflePlayer);\\n\\n        rafflePot[_raffleId] += usdAmount;\\n\\n        rafflePotInWeth[_raffleId] += amountInWeth;\\n    }\\n\\n    function getLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amount\\n    ) public view returns (uint256[] memory) {\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenA;\\n        path[1] = _tokenB;\\n\\n        return _router.getAmountsOut(_amount, path);\\n    }\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external {\\n        require(\\n            IERC20(tokenA).allowance(msg.sender, address(this)) >=\\n                amountADesired &&\\n                IERC20(tokenB).allowance(msg.sender, address(this)) >=\\n                amountBDesired,\\n            \\\"Approval failed\\\"\\n        );\\n\\n        IERC20(tokenA).transferFrom(msg.sender, address(this), amountADesired);\\n        IERC20(tokenB).transferFrom(msg.sender, address(this), amountBDesired);\\n\\n        IERC20(tokenA).approve(uniswapRouterAddress, amountADesired);\\n        IERC20(tokenB).approve(uniswapRouterAddress, amountBDesired);\\n\\n        _router.addLiquidity(\\n            tokenA,\\n            tokenB,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    function playRaffle(address _token, uint256 _amount) external {\\n        if (!isRaffleInProcess[raffleId]) {\\n            require(\\n                isPotTransfered[raffleId],\\n                \\\"Cannot start new raffle before previous winner hasn't receive pot!\\\"\\n            );\\n\\n            raffleId++;\\n            isRaffleInProcess[raffleId] = true;\\n        }\\n\\n        require(isRaffleInProcess[raffleId], \\\"This round has ended!\\\");\\n\\n        require(\\n            isPlayed[msg.sender] != raffleId,\\n            \\\"You have already joined this round!\\\"\\n        );\\n\\n        deposite(_token, _amount, raffleId);\\n\\n        isPlayed[msg.sender] = raffleId;\\n    }\\n\\n    function endRaffle() external onlyAdmin {\\n        requestRandomNumber();\\n        isRaffleInProcess[raffleId] = false;\\n    }\\n\\n    function verifyAndTransfer(\\n        uint256 _raffleId,\\n        address _supposedWinner\\n    ) external onlyAdmin {\\n        require(isPotTransfered[raffleId] == false, \\\"Already transfered pot!\\\");\\n\\n        require(verifyWinner(_raffleId, _supposedWinner), \\\"Wrong player!\\\");\\n\\n        isPotTransfered[_raffleId] = true;\\n\\n        IERC20(_weth).transfer(_supposedWinner, rafflePotInWeth[_raffleId]);\\n    }\\n\\n    function percCalc(\\n        uint256 _num1,\\n        uint256 _num2\\n    ) public pure returns (uint256) {\\n        uint256 movedDec = _num1 * 10 ** DECIMALS;\\n        return movedDec / _num2;\\n    }\\n\\n    function calculateRange(\\n        uint256 _deposit,\\n        uint256 _totalBalance\\n    ) public view returns (uint256) {\\n        require(_totalBalance > 0, \\\"Total balance must be greater than zero\\\");\\n\\n        uint256 depositPerc = percCalc(_deposit, _totalBalance);\\n\\n        uint256 range = depositPerc * RANDOM_MAX_RANGE;\\n\\n        return range / (10 ** DECIMALS);\\n    }\\n\\n    function verifyWinner(\\n        uint256 _raffleId,\\n        address _supposedWinner\\n    ) public view returns (bool) {\\n        (bool isGenerated, uint256[] memory randNumber) = randomNumberConsumer\\n            .getRequestStatus(requestIdForRaffle[raffleId]);\\n\\n        require(isGenerated, \\\"Random number is not received yet!\\\");\\n\\n        uint256 supposedWinnerRafflePos = userPosInRaffle[_supposedWinner][\\n            _raffleId\\n        ];\\n\\n        Player memory supposedWinnerParams = rafflePlayers[_raffleId][\\n            supposedWinnerRafflePos\\n        ];\\n\\n        require(\\n            supposedWinnerParams.playerAddress == _supposedWinner,\\n            \\\"No such player in requested raffle!\\\"\\n        );\\n\\n        uint256 prevPlayersRange;\\n\\n        if (supposedWinnerRafflePos == 0) {\\n            prevPlayersRange = 0;\\n        } else {\\n            prevPlayersRange = calculateRange(\\n                supposedWinnerParams.prevDepSum,\\n                rafflePot[_raffleId]\\n            );\\n        }\\n\\n        uint256 currPlayerRange = calculateRange(\\n            supposedWinnerParams.playerBet,\\n            rafflePot[_raffleId]\\n        );\\n\\n        uint256 maxPlayerDiapason = prevPlayersRange + currPlayerRange;\\n\\n        uint256 checkedRaffleWinnerNumber = randNumber[0];\\n\\n        return\\n            checkedRaffleWinnerNumber > prevPlayersRange &&\\n            checkedRaffleWinnerNumber <= maxPlayerDiapason;\\n    }\\n}\\n\",\"keccak256\":\"0xdb015517a7a0a5f8f588fca1cbe008daf377989041daf23f5a6e89ee6b4a7800\",\"license\":\"MIT\"},\"contracts/RandomNumberConsumerV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\n\\ncontract VRFv2Consumer is VRFConsumerBaseV2, ConfirmedOwner {\\n    event RequestSent(uint256 requestId, uint32 numWords);\\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\\n\\n    struct RequestStatus {\\n        bool fulfilled;\\n        bool exists;\\n        uint256[] randomWords;\\n    }\\n    mapping(uint256 => RequestStatus) public s_requests;\\n    VRFCoordinatorV2Interface COORDINATOR;\\n\\n    uint64 s_subscriptionId;\\n\\n    uint256[] public requestIds;\\n    uint256 public lastRequestId;\\n\\n    bytes32 keyHash =\\n        0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c;\\n\\n    uint32 callbackGasLimit = 100000;\\n\\n    uint16 requestConfirmations = 3;\\n\\n    uint32 numWords = 2;\\n\\n    constructor(\\n        uint64 subscriptionId\\n    )\\n        VRFConsumerBaseV2(0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625)\\n        ConfirmedOwner(msg.sender)\\n    {\\n        COORDINATOR = VRFCoordinatorV2Interface(\\n            0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625\\n        );\\n        s_subscriptionId = subscriptionId;\\n    }\\n\\n    function requestRandomWords()\\n        external\\n        onlyOwner\\n        returns (uint256 requestId)\\n    {\\n        requestId = COORDINATOR.requestRandomWords(\\n            keyHash,\\n            s_subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n        s_requests[requestId] = RequestStatus({\\n            randomWords: new uint256[](0),\\n            exists: true,\\n            fulfilled: false\\n        });\\n        requestIds.push(requestId);\\n        lastRequestId = requestId;\\n        emit RequestSent(requestId, numWords);\\n        return requestId;\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 _requestId,\\n        uint256[] memory _randomWords\\n    ) internal override {\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\n        s_requests[_requestId].fulfilled = true;\\n        s_requests[_requestId].randomWords = _randomWords;\\n        emit RequestFulfilled(_requestId, _randomWords);\\n    }\\n\\n    function getRequestStatus(\\n        uint256 _requestId\\n    ) external view returns (bool fulfilled, uint256[] memory randomWords) {\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\n        RequestStatus memory request = s_requests[_requestId];\\n        return (request.fulfilled, request.randomWords);\\n    }\\n}\\n\",\"keccak256\":\"0xcc289371337051de7d428633034d3e03bceebf0c7c167fa227242d5c9ba8fd48\",\"license\":\"MIT\"},\"node_modules/@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"node_modules/@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"node_modules/@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102ff5760003560e01c8063715018a61161019c578063b375603c116100ee578063e5a0b2ef11610097578063ee095c0e11610071578063ee095c0e14610731578063f2fde38b14610739578063f82695a81461074c57600080fd5b8063e5a0b2ef146106d0578063e744092e146106fb578063e8e337001461071e57600080fd5b8063cf0d9640116100c8578063cf0d9640146106a2578063dbdff2c1146106b5578063e248a7e6146106bd57600080fd5b8063b375603c14610667578063c48e84bc14610670578063c5d7802e1461069957600080fd5b80637c8c0b9211610150578063a56dfe4a1161012a578063a56dfe4a14610634578063a86d2e191461063d578063ae91fc301461065457600080fd5b80637c8c0b92146105f05780638da5cb5b146106105780639a421bc81461062157600080fd5b8063789a12fd11610181578063789a12fd1461059d5780637a926165146105bd5780637b912666146105d057600080fd5b8063715018a614610575578063728a4f621461057d57600080fd5b80634b50c6a61161025557806354d36b32116102095780636f3c796d116101e35780636f3c796d1461051f57806370e424e31461053f578063714d60d41461056257600080fd5b806354d36b32146104c057806364c19175146104d35780636b1cdd84146104fc57600080fd5b80634d853ee51161023a5780634d853ee51461047e5780634e3ac00f146104915780634fe23e3b146104b157600080fd5b80634b50c6a61461044b5780634b5a2aa51461046b57600080fd5b8063196c52f8116102b757806329b1438d1161029157806329b1438d1461041d5780632e0f26251461043057806332573ea71461043857600080fd5b8063196c52f8146103d457806320ca3c7f146103e757806324d7806c146103fa57600080fd5b80630a5882d0116102e85780630a5882d0146103645780630c55699c1461037957806318f5f2a81461039057600080fd5b80630974dd7f1461030457806309f87fcb14610341575b600080fd5b61031761031236600461220e565b61075f565b604080516001600160a01b0390941684526020840192909252908201526060015b60405180910390f35b61035461034f366004612245565b6107ab565b6040519015158152602001610338565b610377610372366004612283565b610a4f565b005b610382600f5481565b604051908152602001610338565b6103bc61039e3660046122ce565b6001600160a01b039081166000908152600260205260409020541690565b6040516001600160a01b039091168152602001610338565b6103776103e23660046122f2565b610a9d565b6013546103bc906001600160a01b031681565b6103546104083660046122ce565b600c6020526000908152604090205460ff1681565b61037761042b366004612320565b610b2a565b610382601281565b61038261044636600461220e565b610d12565b6103826104593660046122ce565b60076020526000908152604090205481565b6103776104793660046122ce565b610dcc565b6014546103bc906001600160a01b031681565b61038261049f36600461234c565b60086020526000908152604090205481565b610382670de0b6b3a763ffff81565b6103776104ce3660046122ce565b610e4d565b6103bc6104e136600461234c565b600a602052600090815260409020546001600160a01b031681565b61035461050a36600461234c565b600b6020526000908152604090205460ff1681565b61038261052d36600461234c565b60036020526000908152604090205481565b61035461054d36600461234c565b60056020526000908152604090205460ff1681565b61038261057036600461220e565b610ece565b610377610efb565b61059061058b366004612365565b610f0f565b60405161033891906123a6565b6105b06105ab36600461234c565b611000565b60405161033891906123ea565b6103776105cb36600461244c565b611095565b6103826105de36600461234c565b60046020526000908152604090205481565b6103826105fe36600461234c565b60096020526000908152604090205481565b6000546001600160a01b03166103bc565b61037761062f366004612245565b61111f565b61038260105481565b600e54600090815260086020526040902054610382565b61037761066236600461244c565b611301565b610382600e5481565b6103bc61067e3660046122ce565b6002602052600090815260409020546001600160a01b031681565b61038260115481565b6103826106b03660046122ce565b61138b565b610382611396565b6103826106cb366004612320565b6113d4565b6103826106de366004612320565b600d60209081526000928352604080842090915290825290205481565b6103546107093660046122ce565b60016020526000908152604090205460ff1681565b61037761072c36600461247a565b61142d565b61037761180f565b6103776107473660046122ce565b611891565b61037761075a3660046122ce565b611921565b6006602052816000526040600020818154811061077b57600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b03909116935090915083565b601554600e546000908152600960205260408082205490517fd8a4676f00000000000000000000000000000000000000000000000000000000815260048101919091529091829182916001600160a01b03169063d8a4676f90602401600060405180830381865afa158015610824573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261084c91908101906125aa565b91509150816108ad5760405162461bcd60e51b815260206004820152602260248201527f52616e646f6d206e756d626572206973206e6f74207265636569766564207965604482015261742160f01b60648201526084015b60405180910390fd5b6001600160a01b0384166000908152600d60209081526040808320888452825280832054600690925282208054919291839081106108ed576108ed6125fb565b600091825260209182902060408051606081018252600390930290910180546001600160a01b03908116808552600183015495850195909552600290910154918301919091529092508716146109ab5760405162461bcd60e51b815260206004820152602360248201527f4e6f207375636820706c6179657220696e20726571756573746564207261666660448201527f6c6521000000000000000000000000000000000000000000000000000000000060648201526084016108a4565b6000826000036109bd575060006109e1565b6109de8260400151600360008b815260200190815260200160002054610d12565b90505b60208083015160008a815260039092526040822054610a009190610d12565b90506000610a0e8284612627565b9050600086600081518110610a2557610a256125fb565b602002602001015190508381118015610a3e5750818111155b985050505050505050505b92915050565b610a576119ac565b6001600160a01b039283166000908152600160209081526040808320805460ff191694151594909417909355600290522080546001600160a01b03191691909216179055565b336000908152600c602052604090205460ff16610afc5760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792061646d696e2063616e20706572666f726d2074686973210000000060448201526064016108a4565b6001600160a01b03918216600090815260026020526040902080546001600160a01b03191691909216179055565b600e5460009081526005602052604090205460ff16610c0757600e546000908152600b602052604090205460ff16610bd55760405162461bcd60e51b815260206004820152604260248201527f43616e6e6f74207374617274206e657720726166666c65206265666f7265207060448201527f726576696f75732077696e6e6572206861736e2774207265636569766520706f606482015261742160f01b608482015260a4016108a4565b600e8054906000610be58361263a565b9091555050600e546000908152600560205260409020805460ff191660011790555b600e5460009081526005602052604090205460ff16610c685760405162461bcd60e51b815260206004820152601560248201527f5468697320726f756e642068617320656e64656421000000000000000000000060448201526064016108a4565b600e543360009081526007602052604090205403610cee5760405162461bcd60e51b815260206004820152602360248201527f596f75206861766520616c7265616479206a6f696e6564207468697320726f7560448201527f6e6421000000000000000000000000000000000000000000000000000000000060648201526084016108a4565b610cfb8282600e54611a06565b5050600e5433600090815260076020526040902055565b6000808211610d895760405162461bcd60e51b815260206004820152602760248201527f546f74616c2062616c616e6365206d757374206265206772656174657220746860448201527f616e207a65726f0000000000000000000000000000000000000000000000000060648201526084016108a4565b6000610d958484610ece565b90506000610dab670de0b6b3a763ffff83612653565b9050610db96012600a61274e565b610dc3908261275a565b95945050505050565b336000908152600c602052604090205460ff16610e2b5760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792061646d696e2063616e20706572666f726d2074686973210000000060448201526064016108a4565b601580546001600160a01b0319166001600160a01b0392909216919091179055565b336000908152600c602052604090205460ff16610eac5760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792061646d696e2063616e20706572666f726d2074686973210000000060448201526064016108a4565b601280546001600160a01b0319166001600160a01b0392909216919091179055565b600080610edd6012600a61274e565b610ee79085612653565b9050610ef3838261275a565b949350505050565b610f036119ac565b610f0d6000611fc5565b565b604080516002808252606080830184529260009291906020830190803683370190505090508481600081518110610f4857610f486125fb565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110610f7c57610f7c6125fb565b6001600160a01b03928316602091820292909201015260165460405163d06ca61f60e01b815291169063d06ca61f90610fbb90869085906004016127c1565b600060405180830381865afa158015610fd8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dc391908101906127da565b606060066000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561108a576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018082015484860152600290910154918301919091529083529092019101611035565b505050509050919050565b336000908152600c602052604090205460ff166110f45760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792061646d696e2063616e20706572666f726d2074686973210000000060448201526064016108a4565b6001600160a01b03919091166000908152600c60205260409020805460ff1916911515919091179055565b336000908152600c602052604090205460ff1661117e5760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792061646d696e2063616e20706572666f726d2074686973210000000060448201526064016108a4565b600e546000908152600b602052604090205460ff16156111e05760405162461bcd60e51b815260206004820152601760248201527f416c7265616479207472616e73666572656420706f742100000000000000000060448201526064016108a4565b6111ea82826107ab565b6112365760405162461bcd60e51b815260206004820152600d60248201527f57726f6e6720706c61796572210000000000000000000000000000000000000060448201526064016108a4565b6000828152600b60209081526040808320805460ff19166001179055601254600492839052928190205490517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b039093169263a9059cbb926112b99286929091016001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156112d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fc919061280f565b505050565b336000908152600c602052604090205460ff166113605760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792061646d696e2063616e20706572666f726d2074686973210000000060448201526064016108a4565b6001600160a01b03919091166000908152600160205260409020805460ff1916911515919091179055565b6000610a4982612015565b60006113a360014361282c565b604080519140602083015242908201526060016040516020818303038152906040528051906020012060001c905090565b60008181526006602090815260408083206001600160a01b0386168452600d8352818420600e54855290925282205481548110611413576114136125fb565b906000526020600020906003020160010154905092915050565b604051636eb1769f60e11b815233600482015230602482015286906001600160a01b038a169063dd62ed3e90604401602060405180830381865afa158015611479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149d919061283f565b101580156115195750604051636eb1769f60e11b815233600482015230602482015285906001600160a01b0389169063dd62ed3e90604401602060405180830381865afa1580156114f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611516919061283f565b10155b6115655760405162461bcd60e51b815260206004820152600f60248201527f417070726f76616c206661696c6564000000000000000000000000000000000060448201526064016108a4565b6040516323b872dd60e01b8152336004820152306024820152604481018790526001600160a01b038916906323b872dd906064016020604051808303816000875af11580156115b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115dc919061280f565b506040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b038816906323b872dd906064016020604051808303816000875af1158015611630573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611654919061280f565b5060135460405163095ea7b360e01b81526001600160a01b039182166004820152602481018890529089169063095ea7b3906044016020604051808303816000875af11580156116a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cc919061280f565b5060135460405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529088169063095ea7b3906044016020604051808303816000875af1158015611720573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611744919061280f565b506016546040517fe8e337000000000000000000000000000000000000000000000000000000000081526001600160a01b038a81166004830152898116602483015260448201899052606482018890526084820187905260a4820186905284811660c483015260e482018490529091169063e8e3370090610104016060604051808303816000875af11580156117de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118029190612858565b5050505050505050505050565b336000908152600c602052604090205460ff1661186e5760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792061646d696e2063616e20706572666f726d2074686973210000000060448201526064016108a4565b611876612122565b600e546000908152600560205260409020805460ff19169055565b6118996119ac565b6001600160a01b0381166119155760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016108a4565b61191e81611fc5565b50565b336000908152600c602052604090205460ff166119805760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792061646d696e2063616e20706572666f726d2074686973210000000060448201526064016108a4565b601680546001600160a01b039092166001600160a01b0319928316811790915560138054909216179055565b6000546001600160a01b03163314610f0d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a4565b6001600160a01b038316600090815260016020526040902054839060ff16611a705760405162461bcd60e51b815260206004820152601760248201527f546f6b656e206973206e6f7420737570706f727465642100000000000000000060448201526064016108a4565b6040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b038516906323b872dd906064016020604051808303816000875af1158015611ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae7919061280f565b506040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015283906001600160a01b038616906370a0823190602401602060405180830381865afa158015611b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6b919061283f565b10158015611b795750600083115b611bc55760405162461bcd60e51b815260206004820152601360248201527f4e6f7420656e6f7567682062616c616e6365210000000000000000000000000060448201526064016108a4565b6000611bd085612015565b90506000611bde8583612653565b60408051600280825260608201835292935060009290916020830190803683370190505090508681600081518110611c1857611c186125fb565b6001600160a01b039283166020918202929092010152601254825191169082906001908110611c4957611c496125fb565b6001600160a01b03928316602091820292909201015260135460405163095ea7b360e01b81529082166004820152602481018890529088169063095ea7b3906044016020604051808303816000875af1158015611caa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cce919061280f565b5060165460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f90611d02908a9086906004016127c1565b600060405180830381865afa158015611d1f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d4791908101906127da565b60165481519192506000916001600160a01b03909116906338ed1739908a908590611d749060019061282c565b81518110611d8457611d846125fb565b6020026020010151863042610258611d9c9190612627565b6040518663ffffffff1660e01b8152600401611dbc959493929190612886565b6000604051808303816000875af1158015611ddb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e0391908101906127da565b60018351611e11919061282c565b81518110611e2157611e216125fb565b60200260200101519050611e58604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b3381600001906001600160a01b031690816001600160a01b0316815250508481602001818152505060036000898152602001908152602001600020548160400181815250506006600089815260200190815260200160002080549050600d6000336001600160a01b03166001600160a01b0316815260200190815260200160002060008a8152602001908152602001600020819055506006600089815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155505084600360008a81526020019081526020016000206000828254611f919190612627565b909155505060008881526004602052604081208054849290611fb4908490612627565b909155505050505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116600090815260016020526040812054829060ff1661207f5760405162461bcd60e51b815260206004820152601760248201527f546f6b656e206973206e6f7420737570706f727465642100000000000000000060448201526064016108a4565b6001600160a01b038084166000908152600260205260408082205481517ffeaf968c0000000000000000000000000000000000000000000000000000000081529151931692839163feaf968c9160048083019260a09291908290030181865afa1580156120f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211491906128e1565b509198975050505050505050565b336000908152600c602052604090205460ff166121815760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792061646d696e2063616e20706572666f726d2074686973210000000060448201526064016108a4565b601560009054906101000a90046001600160a01b03166001600160a01b031663e0c862896040518163ffffffff1660e01b81526004016020604051808303816000875af11580156121d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fa919061283f565b600e54600090815260096020526040902055565b6000806040838503121561222157600080fd5b50508035926020909101359150565b6001600160a01b038116811461191e57600080fd5b6000806040838503121561225857600080fd5b82359150602083013561226a81612230565b809150509250929050565b801515811461191e57600080fd5b60008060006060848603121561229857600080fd5b83356122a381612230565b925060208401356122b381612230565b915060408401356122c381612275565b809150509250925092565b6000602082840312156122e057600080fd5b81356122eb81612230565b9392505050565b6000806040838503121561230557600080fd5b823561231081612230565b9150602083013561226a81612230565b6000806040838503121561233357600080fd5b823561233e81612230565b946020939093013593505050565b60006020828403121561235e57600080fd5b5035919050565b60008060006060848603121561237a57600080fd5b833561238581612230565b9250602084013561239581612230565b929592945050506040919091013590565b6020808252825182820181905260009190848201906040850190845b818110156123de578351835292840192918401916001016123c2565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b8281101561243f57815180516001600160a01b0316855286810151878601528501518585015260609093019290850190600101612407565b5091979650505050505050565b6000806040838503121561245f57600080fd5b823561246a81612230565b9150602083013561226a81612275565b600080600080600080600080610100898b03121561249757600080fd5b88356124a281612230565b975060208901356124b281612230565b965060408901359550606089013594506080890135935060a0890135925060c08901356124de81612230565b8092505060e089013590509295985092959890939650565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261251d57600080fd5b8151602067ffffffffffffffff8083111561253a5761253a6124f6565b8260051b604051601f19603f8301168101818110848211171561255f5761255f6124f6565b604052938452602081870181019490810192508785111561257f57600080fd5b6020870191505b8482101561259f57815183529183019190830190612586565b979650505050505050565b600080604083850312156125bd57600080fd5b82516125c881612275565b602084015190925067ffffffffffffffff8111156125e557600080fd5b6125f18582860161250c565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610a4957610a49612611565b60006001820161264c5761264c612611565b5060010190565b8082028115828204841417610a4957610a49612611565b600181815b808511156126a557816000190482111561268b5761268b612611565b8085161561269857918102915b93841c939080029061266f565b509250929050565b6000826126bc57506001610a49565b816126c957506000610a49565b81600181146126df57600281146126e957612705565b6001915050610a49565b60ff8411156126fa576126fa612611565b50506001821b610a49565b5060208310610133831016604e8410600b8410161715612728575081810a610a49565b612732838361266a565b806000190482111561274657612746612611565b029392505050565b60006122eb83836126ad565b60008261277757634e487b7160e01b600052601260045260246000fd5b500490565b60008151808452602080850194506020840160005b838110156127b65781516001600160a01b031687529582019590820190600101612791565b509495945050505050565b828152604060208201526000610ef3604083018461277c565b6000602082840312156127ec57600080fd5b815167ffffffffffffffff81111561280357600080fd5b610ef38482850161250c565b60006020828403121561282157600080fd5b81516122eb81612275565b81810381811115610a4957610a49612611565b60006020828403121561285157600080fd5b5051919050565b60008060006060848603121561286d57600080fd5b8351925060208401519150604084015190509250925092565b85815284602082015260a0604082015260006128a560a083018661277c565b6001600160a01b0394909416606083015250608001529392505050565b805169ffffffffffffffffffff811681146128dc57600080fd5b919050565b600080600080600060a086880312156128f957600080fd5b612902866128c2565b9450602086015193506040860151925060608601519150612925608087016128c2565b9050929550929590935056fea264697066735822122052c83720ba3884cb8d7bb6d469e239e5ce8f5b67d3f5ef8391c8290c5a9a71d864736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14816,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13447,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "allowedTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13451,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "currencyOracle",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 13455,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "rafflePot",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13459,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "rafflePotInWeth",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13463,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "isRaffleInProcess",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 13469,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "rafflePlayers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_array(t_struct(Player)13532_storage)dyn_storage)"
      },
      {
        "astId": 13473,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "isPlayed",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13477,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "raffleWinnerNumber",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13481,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "requestIdForRaffle",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13485,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "raffleWinner",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 13489,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "isPotTransfered",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 13493,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "isAdmin",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13499,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "userPosInRaffle",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 13501,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "raffleId",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 13503,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "x",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 13505,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "y",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 13507,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "z",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 13515,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "_weth",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 13517,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "uniswapRouterAddress",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 13519,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "founder",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 13522,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "randomNumberConsumer",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(VRFv2Consumer)14759"
      },
      {
        "astId": 13525,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "_router",
        "offset": 0,
        "slot": "22",
        "type": "t_contract(IUniswapV2Router02)15133"
      },
      {
        "astId": 13536,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "_gap",
        "offset": 0,
        "slot": "23",
        "type": "t_array(t_uint256)30_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Player)13532_storage)dyn_storage": {
        "base": "t_struct(Player)13532_storage",
        "encoding": "dynamic_array",
        "label": "struct Raffle.Player[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)30_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[30]",
        "numberOfBytes": "960"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IUniswapV2Router02)15133": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_contract(VRFv2Consumer)14759": {
        "encoding": "inplace",
        "label": "contract VRFv2Consumer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Player)13532_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Raffle.Player[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Player)13532_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Player)13532_storage": {
        "encoding": "inplace",
        "label": "struct Raffle.Player",
        "members": [
          {
            "astId": 13527,
            "contract": "contracts/Raffle.sol:Raffle",
            "label": "playerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13529,
            "contract": "contracts/Raffle.sol:Raffle",
            "label": "playerBet",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13531,
            "contract": "contracts/Raffle.sol:Raffle",
            "label": "prevDepSum",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}